<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 <modelVersion>4.0.0</modelVersion>

 <groupId>onvif_devicec</groupId>
 <artifactId>onvif_device</artifactId>
 <version>1.0-SNAPSHOT</version>
 <packaging>jar</packaging>

 <description>
  This project demonstrates how to generate a JakartaEE JAX-WS client with Java 11 and Maven 3.
 </description>

 <properties>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 </properties>

 <dependencies>
  <dependency>
   <groupId>javax.xml.bind</groupId>
   <artifactId>jaxb-api</artifactId>
   <version>2.3.1</version>
  </dependency>
  <dependency>
   <groupId>com.sun.xml.bind</groupId>
   <artifactId>jaxb-core</artifactId>
   <version>4.0.1</version>
  </dependency>
  <dependency>
   <groupId>com.sun.xml.bind</groupId>
   <artifactId>jaxb-impl</artifactId>
   <version>4.0.1</version>
  </dependency>
    
  <dependency>
   <groupId>org.apache.cxf</groupId>
   <artifactId>cxf-rt-frontend-jaxws</artifactId>
   <version>3.5.4</version>
  </dependency>
  <dependency>
   <groupId>org.apache.cxf</groupId>
   <artifactId>cxf-rt-transports-http</artifactId>
   <version>3.5.4</version>
  </dependency>
  <dependency>
   <groupId>com.sun.xml.bind</groupId>
   <artifactId>jaxb-xjc</artifactId>
   <version>4.0.1</version>
  </dependency>
  	
  <dependency>
   <groupId>jakarta.xml.ws</groupId>
   <artifactId>jakarta.xml.ws-api</artifactId>
   <version>3.0.1</version>
  </dependency>
  <dependency>
   <groupId>com.sun.xml.ws</groupId>
   <artifactId>jaxws-rt</artifactId>
   <version>3.0.2</version>
   <scope>runtime</scope>
  </dependency>
  <dependency>
   <groupId>com.sun.xml.messaging.saaj</groupId>
   <artifactId>saaj-impl</artifactId>
   <version>3.0.0</version>
   <scope>runtime</scope>
  </dependency>

  <dependency>
   <groupId>jakarta.xml.bind</groupId>
   <artifactId>jakarta.xml.bind-api</artifactId>
   <version>3.0.1</version>
  </dependency>
  <dependency>
   <groupId>jakarta.jws</groupId>
   <artifactId>jakarta.jws-api</artifactId>
   <version>3.0.0</version>
  </dependency>
  <dependency>
   <groupId>jakarta.xml.soap</groupId>
   <artifactId>jakarta.xml.soap-api</artifactId>
   <version>3.0.0</version>
  </dependency>

  <dependency>
   <groupId>org.junit.jupiter</groupId>
   <artifactId>junit-jupiter-api</artifactId>
   <version>5.8.2</version>
   <scope>test</scope>
  </dependency>

 </dependencies>

 <build>
  <plugins>
   <plugin>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-codegen-plugin</artifactId>
    <version>3.5.4</version>
    <executions>
     <execution>
      <id>generate-sources</id>
      <phase>generate-sources</phase>
      <configuration>
       <sourceRoot>${project.build.directory}/generated-sources/cxf/java</sourceRoot>
       <wsdlOptions>
        <wsdlOption>
         <wsdl>${basedir}/src/main/wsdl/onvif/ver10/device/wsdl/devicemgmt.wsdl</wsdl>
         <!-- wsdl>${basedir}/src/main/wsdl/onvif/onvif_device/client/devicemgmt_services3.wsdl</wsdl -->
        </wsdlOption>
       </wsdlOptions>
      </configuration>
      <goals>
       <goal>wsdl2java</goal>
      </goals>
     </execution>
    </executions>
   </plugin>

   <plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>build-helper-maven-plugin</artifactId>
    <version>3.3.0</version>
    <executions>
     <execution>
      <id>add-source</id>
      <phase>generate-sources</phase>
      <goals>
       <goal>add-source</goal>
      </goals>
      <configuration>
       <sources>
        <source>${basedir}/src/main/java</source>
       </sources>
      </configuration>
     </execution>
    </executions>
   </plugin>

   <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.9.0</version>
    <configuration>
     <release>11</release>
    </configuration>
   </plugin>

   <plugin>
    <!-- The Jakarta / Eclipse JAX-WS Maven plugin is configured to run the 'wsimport' goal as part of the
         build. You do not have to install the wsimport commandline tool. The plugin uses wsimport through
         its own jaxws-tools.jar dependency. -->
    <groupId>com.sun.xml.ws</groupId>
    <artifactId>jaxws-maven-plugin</artifactId>
    <version>3.0.2</version>
    <executions>
     <execution>
      <goals>
       <goal>wsimport</goal>
      </goals>
     </execution>
    </executions>
    <configuration>

     <!-- wsimport will process the WSDL files under this folder at build time. -->
     <wsdlDirectory>${project.basedir}/src/main/wsdl/onvif/ver10/device/wsdl/</wsdlDirectory>
     <!-- wsdlDirectory>${project.basedir}/src/main/wsdl/onvif/onvif_device/client/</wsdlDirectory -->

     <!-- The generated Service class will load the WSDL at runtime from the root of the classpath
          /test.wsdl rather than the default which is to use the http endpoint from the WSDL files
         Service element. -->
     <wsdlLocation>devicemgmt.wsdl</wsdlLocation>
     <!-- wsdlLocation>devicemgt_services3.wsdl</wsdlLocation -->
     <!-- The extension property tells JAX-WS to support soap v1.2 bindings. -->
     <extension>true</extension>
    </configuration>
    <dependencies>
    <!-- Force the JAX-WS plugin to use a specific version of jaxws-tools.jar that contains the
      wsimport, wsgen, xjc and schemagen tools. -->
     <dependency>
      <groupId>com.sun.xml.ws</groupId>
      <artifactId>jaxws-tools</artifactId>
      <version>3.0.2</version>
     </dependency>
    </dependencies>
   </plugin>
  </plugins>
 </build>

</project>
